<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Product | Getting Technical]]></title>
  <link href="http://twitchtv.github.com/blog/categories/product/atom.xml" rel="self"/>
  <link href="http://twitchtv.github.com/"/>
  <updated>2012-09-26T17:41:28-07:00</updated>
  <id>http://twitchtv.github.com/</id>
  <author>
    <name><![CDATA[TwitchTV]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Broadcasting SDK]]></title>
    <link href="http://twitchtv.github.com/blog/2012/09/25/broadcasting-sdk/"/>
    <updated>2012-09-25T21:51:00-07:00</updated>
    <id>http://twitchtv.github.com/blog/2012/09/25/broadcasting-sdk</id>
    <content type="html"><![CDATA[<p>Twitch is <a href="http://www.businessinsider.com/one-year-later-after-twitchtv-2012-8">flourishing</a>, but we have projects in
the pipeline to change our growth curve. The existing streaming tools are difficult to use and require expensive gaming
rigs or additional hardware. The goal of our SDK is to integrate streaming into games, dramatically lowering the
activation energy to broadcast.</p>

<!-- more -->


<p>Partnerships have been easier to make than we initially planned for. The gaming industry is forward thinking and
excited about successes in free to play, mobile, and social gaming. They believe streaming is the next big thing in
gaming. Paradox recently announced their <a href="http://www.businesswire.com/news/home/20120604006646/en">plans</a> to integrate,
and we have several other deals we are very excited about in the works.</p>

<p>A primary design goal of the SDK is to make it very easy for the game developers to integrate into their games. We have
built a simple C-style API with just a handful of functions. Current count 17 functions. 3-5 Man days is the current
estimate from our Beta-Partners as to how long it takes to integrate streaming into a game.</p>

<ul>
<li>Handles authentication and obtaining a stream key from the Twitch servers</li>
<li>Fetches an list of available ingest servers</li>
<li>Provides optimal settings (e.g. bitrate, resolution) to game based on available bandwidth</li>
<li>Game submits its frame buffer to the SDK, which encodes and streams it Twitch</li>
<li>Capture microphone and speaker audio and mixing them</li>
<li>Send metadata for discovery: Level, victories, champions, headshots, imagine the possibilites.</li>
<li>Sets a trace level for debugging purposes</li>
</ul>


<p>It is critical that the SDK uses as few CPU cycles as possible, thus having minimal impact on the game performance.
We have written our code with performance in mind and have (and will be) tweaking the settings of the encoders to
achieve optimal performance. As an example, we rolled up our sleeves and wrote code to do color space conversion from
RGB to YUV using Intel SSE (that's bit by bit). This cut the time to do the color space conversion in half compared to
the existing codec.</p>

<p>Our current goal is to get our SDK integrated into one of our partners beta. Getting our product to the point where
developers are willing to push it to their users is productive, and we are going to learn a ton once we are in the
hands of real users. Exciting times.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different Features, Equal KPI's]]></title>
    <link href="http://twitchtv.github.com/blog/2012/07/03/mobile-analytics/"/>
    <updated>2012-07-03T14:53:00-07:00</updated>
    <id>http://twitchtv.github.com/blog/2012/07/03/mobile-analytics</id>
    <content type="html"><![CDATA[<p>Last January we were really excited when Jorge joined Twitch to build us an Android app.  As a project manager a key question I helped answer was what to build for the initial release.  I pushed for a tight spec for the v1 Android, and I was excited to see how the spartan Android app’s numbers would stack up to the full featured IOS app.</p>

<!-- more -->


<p>The results are stable nearly identical key metrics: retention and minutes-watched per unique user.  The seven-day user retention are basically the same across the board; iPhone has 34% retention, iPad and Android both have 35% retention.  The minutes-watched per daily unique user are similar on all the apps; iPhone has 35, iPad 44, and Android 40 minutes per day.  The android app's feature set consists of live video, a quality selector (480p, 720p, etc), search, and directories.  The IOS app was released with many additional features available upon login: a directory of channels you follow, push notifications, and chat.</p>

<p>We are not a “mobile-first” company; our users were familiar with Twitch before they downloaded the app.  There is solid evidence that our app growth comes primarily from pushover through alerts that encourage Twitch visitors on mobile devices to download the apps. The pushover doubled the growth in daily active IOS users and increased the growth in iPad daily actives by a factor of 20.</p>

<p>As we add features one at a time, we will see what actually affects Twitch mobile user behavior.  We could have delayed giving users something they value highly, the simple Android app, and that would have been a big waste.</p>
]]></content>
  </entry>
  
</feed>
